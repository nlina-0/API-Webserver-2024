from datetime import date
from flask import Blueprint, request
from flask_jwt_extended import jwt_required, get_jwt_identity
from models.session import Session, SessionSchema
from models.user import User
# from models.session_set import SessionSet, SessionSetSchema
from init import db


sessions_bp = Blueprint("sessions", __name__, url_prefix="/sessions")

# Get all session (R): User and Admin only
@sessions_bp.route("")
# If logged in as user, user can can only access own sessions
@jwt_required()
def get_sessions():
    stmt = db.select(Session)
    sessions = db.session.scalars(stmt).all()
    session_schema = SessionSchema(many=True, exclude=["session_sets"])
    return session_schema.dump(sessions)


# Get session by ID (R); Only user who owns it can access and admin
@sessions_bp.route("/<int:session_id>")
def get_session_by_id(session_id):
    session = db.get_or_404(Session, session_id)
    return SessionSchema().dump(session)


# Create session (C)
@sessions_bp.route("/", methods=["POST"])
@jwt_required()
def create_session():
    user_id = get_jwt_identity()
    user = db.get_or_404(User, user_id)

    session = Session(
        date=date.today(),
        user=user
    )

    db.session.add(session)
    db.session.commit()
    return SessionSchema().dump(session), 201


# Update session (U)





# # NOT WORKING
# # Get all session based on nanme?? (R): Admin only
# @sessions_bp.route("/<string:user>")
# # If logged in as user, user can can only access own sessions
# @jwt_required()
# def get_sessions_by_name(user):
#     sessions = db.get_or_404(Session, user)
#     return SessionSchema().dump(sessions)


# Get user sessions (R): User



# Get all exercise set by session id (R)





# # Update an existing exercise set (U)
# @sessions_bp.route("/<int:id>", methods=["PUT", "PATCH"])
# # @jwt_required
# def update_exercise_set(id):
#     exercise_set = db.get_or_404(ExerciseSet, id)
#     session_info = ExerciseSetSchema(only=["exercise_set", "weight", "reps"], unknown="exclude").load(request.json)
#     # Should the user be the one to create the set number? Or should that be computer generated by ID?
#     exercise_set.weight = session_info.get("weight", exercise_set.weight)
#     exercise_set.reps = session_info.get("reps", exercise_set.reps)
#     db.session.commit()
#     return ExerciseSetSchema().dump(exercise_set)


# # Delete exercise_set (D)
# @sessions_bp.route("/<int:id>", methods=["DELETE"])
# # @jwt_required
# def delete_exercise_set(id):
#     exercise_set = db.get_or_404(ExerciseSet, id)
#     db.session.delete(exercise_set)
#     db.session.commit()
#     return {}
